<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_coe.OneStopSurveyAjaxUtil</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>OneStopSurveyAjaxUtil</name>
        <script><![CDATA[var OneStopSurveyAjaxUtil = Class.create();
OneStopSurveyAjaxUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	/*
	* @description: Checks the survey property to get Survey ID. Returns the sysID  for an existing or new instance of that survey.
	*/
    getSurveyID: function() {
        var state = this.getParameter("sysparm_state");
        var sysid = this.getParameter("sysparm_id");
        var className = this.getParameter("sysparm_class_name");
        var survey = JSON.parse(gs.getProperty("x_snc_coe.coe.survey"));
        var userID = gs.getUserID();
        for (var i = 0; i < survey.length; i++) { // iterate through all the ReviewType objects in the property
            if (survey[i].reviewType == state) {
                var rtrnObj = {
					parentId:survey[i].defaultSurveyID,
					url:this.getIntanceUrl(),
					id:""
				};
                for (var j = 0; j < survey[i].attributes.length; j++) {
                    if (survey[i].attributes[j]['coe'] == className) { // get CoE specific survey ID
                        rtrnObj.parentId = survey[i].attributes[j]['surveyID'];
                    }
                }
                // looking for existing survey instance for the user/Task record
                var at = new GlideRecord("asmt_assessment_instance");
                at.addQuery("user", userID);
                at.addQuery("task_id", sysid);
                at.addQuery("metric_type=" + rtrnObj.parentId + "^stateINready,wip");
                at.query();
                if (at.next()) { // using existing survey instance to render
                    rtrnObj.id = at.getUniqueValue();
					return JSON.stringify(rtrnObj);
                } else { // create a new survey instance as it does not exist or state is not in ready or wip                            
                    var asmt = new global.AssessmentUtils().createAssessments(rtrnObj.parentId, "", userID);
                    asmt = asmt.split(",");
                    if (asmt.length >= 3) {
                        var ai = new GlideRecord("asmt_assessment_instance");
                        ai.get(asmt[0]);
                        ai.trigger_table = className;
                        ai.task_id = sysid;
                        ai.update();
						rtrnObj.id = asmt[0];
                        return JSON.stringify(rtrnObj);
                    }
                }

            }
        }
    },
	
	getIntanceUrl: function() {
		return gs.getProperty('glide.servlet.uri');
	},

    type: 'OneStopSurveyAjaxUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>piyushkumar1@kpmg.com</sys_created_by>
        <sys_created_on>2020-11-23 17:49:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8c6657171be8e450a63cf9f5464bcb81</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>OneStopSurveyAjaxUtil</sys_name>
        <sys_package display_value="Audit CoE" source="x_snc_coe">60a5ae6b1b7850103fa411fc2d4bcbe5</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Audit CoE">60a5ae6b1b7850103fa411fc2d4bcbe5</sys_scope>
        <sys_update_name>sys_script_include_8c6657171be8e450a63cf9f5464bcb81</sys_update_name>
        <sys_updated_by>piyushkumar1@kpmg.com</sys_updated_by>
        <sys_updated_on>2021-01-11 12:22:35</sys_updated_on>
    </sys_script_include>
</record_update>
